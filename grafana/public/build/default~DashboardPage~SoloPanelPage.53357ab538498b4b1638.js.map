{"version":3,"sources":["webpack:///./public/app/features/dashboard/state/initDashboard.ts","webpack:///./public/app/features/dashboard/components/Inspector/types.ts","webpack:///./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderCorner.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenuItem.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenu.tsx","webpack:///./public/app/features/dashboard/utils/getPanelMenu.ts","webpack:///./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeader.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelChrome.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelChromeAngular.tsx","webpack:///./public/app/features/dashboard/dashgrid/DashboardPanel.tsx"],"names":["redirectToNewUrl","slug","dispatch","currentPath","backendSrv","getDashboardBySlug","res","newUrl","meta","url","indexOf","replace","locationUtil","stripBaseFromUrl","updateLocation","path","partial","fetchDashboard","args","getState","routeInfo","DashboardRouteInfo","Home","Normal","New","get","dashDTO","redirectUri","canSave","canShare","canStar","urlType","urlSlug","location","loaderSrv","$injector","loadDashboard","urlUid","fixUrl","dashboardUrl","getNewDashboardModelData","urlFolderId","message","cancelled","dashboardInitFailed","error","console","initDashboard","dashboardInitFetching","setTimeout","dashboard","getModel","dashboardInitSlow","dashboardInitServices","DashboardModel","storeState","query","orgId","user","timeSrv","annotationsSrv","keybindingSrv","unsavedChangesSrv","dashboardSrv","init","modifiedQueries","panelId","queries","fromExplore","initVariablesTransaction","templating","transaction","uid","initPhase","DashboardInitPhase","Services","processRepeats","updateSubmenuVisibility","queryParams","autofitpanels","autoFitPanels","window","innerHeight","kiosk","$scope","setupDashboardBindings","err","notifyApp","createErrorNotification","updateQueriesWhenComingFromExplore","setCurrent","emitDashboardViewEvent","dashboardInitCompleted","data","isNew","folderId","title","panels","type","gridPos","x","y","w","h","parseInt","originPanelId","panelArrId","findIndex","panel","id","targets","clearDashboardQueriesToUpdateOnLoad","InspectTab","InfoMode","PanelHeaderCorner","getTimeSrv","getInfoMode","props","Error","description","Info","links","length","Links","getInfoContent","markdown","interpolatedMarkdown","templateSrv","scopedVars","markedInterpolatedMarkdown","renderMarkdown","getLinks","className","dangerouslySetInnerHTML","__html","map","link","idx","key","href","target","onClickError","getLocationSrv","update","inspect","inspectTab","infoMode","content","onClick","theme","placement","toLowerCase","this","renderCornerType","Component","PanelHeaderMenuItem","isSubMenu","isDivider","useTheme","menuIconClassName","css","spacing","sm","shortcutIconClassName","xs","colors","textWeak","undefined","iconClassName","name","aria-label","selectors","components","Panels","Panel","headerItems","text","shortcut","children","PanelHeaderMenu","renderItems","menu","role","menuItem","subMenu","items","PureComponent","getPanelMenu","angularComponent","onInspectPanel","tab","isEditing","push","event","preventDefault","store","viewPanel","canEditPanel","editPanel","sharePanel","contextSrv","hasAccessToExplore","plugin","skipDataQuery","openInNewWindow","ctrlKey","metaKey","open","navigateToExplore","getDataSourceSrv","getExploreUrl","inspectMenu","e","canEdit","isViewing","duplicatePanel","copyPanel","scope","getScope","panelCtrl","$$childHead","ctrl","angularMenuItems","getExtendedMenu","item","reactItem","click","$eval","removePanel","PanelHeader","clickCoordinates","state","panelMenuOpen","menuItems","eventToClickCoordinates","clientX","clientY","onMouseDown","isClick","isEqual","onMenuToggle","stopPropagation","setState","closeMenu","onCancelQuery","getQueryRunner","cancelQuery","openInspect","renderNotice","notice","severity","style","marginRight","alertState","panelHeaderClass","classNames","notices","series","LoadingState","Loading","renderLoadingState","getPanelLinksSupplier","Object","values","size","parent","document","request","timeInfo","PanelChrome","onRefresh","isInView","width","timeData","applyPanelTimeOverrides","timeRange","wantsQueryExecution","run","datasource","dashboardId","timezone","getTimezone","maxDataPoints","minInterval","interval","cacheTimeout","transformations","onRender","refreshWhenInView","stateUpdate","renderCounter","onOptionsChange","options","updateOptions","onFieldConfigChange","config","updateFieldConfig","onPanelError","errorMessage","onChangeTimeRange","setTime","from","toUtc","to","isFirstLoad","NotStarted","DefaultTimeRange","events","on","PanelEvents","refresh","render","panelInitialized","hasPanelSnapshot","Done","getProcessedDataFrames","snapshotData","querySubscription","getData","withTransforms","withFieldConfig","subscribe","next","onDataUpdate","off","unsubscribe","prevProps","snapshot","frame","toDataFrameDTO","loadingState","pluginMeta","height","shouldSignalRenderingCompleted","profiler","renderingCompleted","PanelComponent","headerHeight","hasOverlayHeader","panelHeaderHeight","chromePadding","noPadding","panelPadding","panelWidth","PANEL_BORDER","innerPanelHeight","panelContentClassNames","panelOptions","getOptions","timeZone","fieldConfig","transparent","replaceVariables","hasTitle","containerClassNames","containerByTitle","renderPanel","PanelChromeAngularUnconnected","element","onPanelRenderEvent","payload","alert","forceUpdate","loadAngularPanel","queryRunner","onPanelDataUpdate","cleanUpAngularPanel","prevState","scopeProps","getInnerPanelHeight","getInnerPanelWidth","emit","panelSizeChanged","setPanelAngularComponent","loader","getAngularLoader","load","subscribeToRenderEvent","destroy","ref","mapDispatchToProps","PanelChromeAngular","connect","DashboardPanelUnconnected","specialPanels","onMouseEnter","setPanelFocus","onMouseLeave","isLazy","initDashboardPanel","angularPanelCtrl","panelWrapperClass","DashboardPanel","panelState"],"mappings":"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","file":"default~DashboardPage~SoloPanelPage.53357ab538498b4b1638.js","sourcesContent":["// Services & Utils\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { DashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { DashboardLoaderSrv } from 'app/features/dashboard/services/DashboardLoaderSrv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { AnnotationsSrv } from 'app/features/annotations/annotations_srv';\nimport { KeybindingSrv } from 'app/core/services/keybindingSrv';\n// Actions\nimport { notifyApp, updateLocation } from 'app/core/actions';\nimport {\n  clearDashboardQueriesToUpdateOnLoad,\n  dashboardInitCompleted,\n  dashboardInitFailed,\n  dashboardInitFetching,\n  dashboardInitServices,\n  dashboardInitSlow,\n} from './reducers';\n// Types\nimport {\n  DashboardDTO,\n  DashboardRouteInfo,\n  StoreState,\n  ThunkDispatch,\n  ThunkResult,\n  DashboardInitPhase,\n} from 'app/types';\nimport { DashboardModel } from './DashboardModel';\nimport { DataQuery, locationUtil } from '@grafana/data';\nimport { initVariablesTransaction } from '../../variables/state/actions';\nimport { emitDashboardViewEvent } from './analyticsProcessor';\n\nexport interface InitDashboardArgs {\n  $injector: any;\n  $scope: any;\n  urlUid?: string;\n  urlSlug?: string;\n  urlType?: string;\n  urlFolderId?: string;\n  routeInfo: DashboardRouteInfo;\n  fixUrl: boolean;\n}\n\nasync function redirectToNewUrl(slug: string, dispatch: ThunkDispatch, currentPath: string) {\n  const res = await backendSrv.getDashboardBySlug(slug);\n\n  if (res) {\n    let newUrl = res.meta.url;\n\n    // fix solo route urls\n    if (currentPath.indexOf('dashboard-solo') !== -1) {\n      newUrl = newUrl.replace('/d/', '/d-solo/');\n    }\n\n    const url = locationUtil.stripBaseFromUrl(newUrl);\n    dispatch(updateLocation({ path: url, partial: true, replace: true }));\n  }\n}\n\nasync function fetchDashboard(\n  args: InitDashboardArgs,\n  dispatch: ThunkDispatch,\n  getState: () => StoreState\n): Promise<DashboardDTO | null> {\n  try {\n    switch (args.routeInfo) {\n      case DashboardRouteInfo.Home: {\n        // load home dash\n        const dashDTO: DashboardDTO = await backendSrv.get('/api/dashboards/home');\n\n        // if user specified a custom home dashboard redirect to that\n        if (dashDTO.redirectUri) {\n          const newUrl = locationUtil.stripBaseFromUrl(dashDTO.redirectUri);\n          dispatch(updateLocation({ path: newUrl, replace: true }));\n          return null;\n        }\n\n        // disable some actions on the default home dashboard\n        dashDTO.meta.canSave = false;\n        dashDTO.meta.canShare = false;\n        dashDTO.meta.canStar = false;\n        return dashDTO;\n      }\n      case DashboardRouteInfo.Normal: {\n        // for old db routes we redirect\n        if (args.urlType === 'db') {\n          redirectToNewUrl(args.urlSlug!, dispatch, getState().location.path);\n          return null;\n        }\n\n        const loaderSrv: DashboardLoaderSrv = args.$injector.get('dashboardLoaderSrv');\n        const dashDTO: DashboardDTO = await loaderSrv.loadDashboard(args.urlType, args.urlSlug, args.urlUid);\n\n        if (args.fixUrl && dashDTO.meta.url) {\n          // check if the current url is correct (might be old slug)\n          const dashboardUrl = locationUtil.stripBaseFromUrl(dashDTO.meta.url);\n          const currentPath = getState().location.path;\n\n          if (dashboardUrl !== currentPath) {\n            // replace url to not create additional history items and then return so that initDashboard below isn't executed multiple times.\n            dispatch(updateLocation({ path: dashboardUrl, partial: true, replace: true }));\n            return null;\n          }\n        }\n        return dashDTO;\n      }\n      case DashboardRouteInfo.New: {\n        return getNewDashboardModelData(args.urlFolderId);\n      }\n      default:\n        throw { message: 'Unknown route ' + args.routeInfo };\n    }\n  } catch (err) {\n    // Ignore cancelled errors\n    if (err.cancelled) {\n      return null;\n    }\n\n    dispatch(dashboardInitFailed({ message: 'Failed to fetch dashboard', error: err }));\n    console.error(err);\n    return null;\n  }\n}\n\n/**\n * This action (or saga) does everything needed to bootstrap a dashboard & dashboard model.\n * First it handles the process of fetching the dashboard, correcting the url if required (causing redirects/url updates)\n *\n * This is used both for single dashboard & solo panel routes, home & new dashboard routes.\n *\n * Then it handles the initializing of the old angular services that the dashboard components & panels still depend on\n *\n */\nexport function initDashboard(args: InitDashboardArgs): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    // set fetching state\n    dispatch(dashboardInitFetching());\n\n    // Detect slow loading / initializing and set state flag\n    // This is in order to not show loading indication for fast loading dashboards as it creates blinking/flashing\n    setTimeout(() => {\n      if (getState().dashboard.getModel() === null) {\n        dispatch(dashboardInitSlow());\n      }\n    }, 500);\n\n    // fetch dashboard data\n    const dashDTO = await fetchDashboard(args, dispatch, getState);\n\n    // returns null if there was a redirect or error\n    if (!dashDTO) {\n      return;\n    }\n\n    // set initializing state\n    dispatch(dashboardInitServices());\n\n    // create model\n    let dashboard: DashboardModel;\n    try {\n      dashboard = new DashboardModel(dashDTO.dashboard, dashDTO.meta);\n    } catch (err) {\n      dispatch(dashboardInitFailed({ message: 'Failed create dashboard model', error: err }));\n      console.error(err);\n      return;\n    }\n\n    // add missing orgId query param\n    const storeState = getState();\n    if (!storeState.location.query.orgId) {\n      dispatch(updateLocation({ query: { orgId: storeState.user.orgId }, partial: true, replace: true }));\n    }\n\n    // init services\n    const timeSrv: TimeSrv = args.$injector.get('timeSrv');\n    const annotationsSrv: AnnotationsSrv = args.$injector.get('annotationsSrv');\n    const keybindingSrv: KeybindingSrv = args.$injector.get('keybindingSrv');\n    const unsavedChangesSrv = args.$injector.get('unsavedChangesSrv');\n    const dashboardSrv: DashboardSrv = args.$injector.get('dashboardSrv');\n\n    timeSrv.init(dashboard);\n    annotationsSrv.init(dashboard);\n\n    if (storeState.dashboard.modifiedQueries) {\n      const { panelId, queries } = storeState.dashboard.modifiedQueries;\n      dashboard.meta.fromExplore = !!(panelId && queries);\n    }\n\n    // template values service needs to initialize completely before the rest of the dashboard can load\n    await dispatch(initVariablesTransaction(args.urlUid!, dashboard));\n\n    if (getState().templating.transaction.uid !== args.urlUid) {\n      // if a previous dashboard has slow running variable queries the batch uid will be the new one\n      // but the args.urlUid will be the same as before initVariablesTransaction was called so then we can't continue initializing\n      // the previous dashboard.\n      return;\n    }\n\n    // If dashboard is in a different init phase it means it cancelled during service init\n    if (getState().dashboard.initPhase !== DashboardInitPhase.Services) {\n      return;\n    }\n\n    try {\n      dashboard.processRepeats();\n      dashboard.updateSubmenuVisibility();\n\n      // handle auto fix experimental feature\n      const queryParams = getState().location.query;\n      if (queryParams.autofitpanels) {\n        dashboard.autoFitPanels(window.innerHeight, queryParams.kiosk);\n      }\n\n      // init unsaved changes tracking\n      unsavedChangesSrv.init(dashboard, args.$scope);\n      keybindingSrv.setupDashboardBindings(args.$scope, dashboard);\n    } catch (err) {\n      dispatch(notifyApp(createErrorNotification('Dashboard init failed', err)));\n      console.error(err);\n    }\n\n    if (storeState.dashboard.modifiedQueries) {\n      const { panelId, queries } = storeState.dashboard.modifiedQueries;\n      updateQueriesWhenComingFromExplore(dispatch, dashboard, panelId, queries);\n    }\n\n    // legacy srv state\n    dashboardSrv.setCurrent(dashboard);\n\n    // send open dashboard event\n    if (args.routeInfo !== DashboardRouteInfo.New) {\n      emitDashboardViewEvent(dashboard);\n    }\n\n    // yay we are done\n    dispatch(dashboardInitCompleted(dashboard));\n  };\n}\n\nfunction getNewDashboardModelData(urlFolderId?: string): any {\n  const data = {\n    meta: {\n      canStar: false,\n      canShare: false,\n      isNew: true,\n      folderId: 0,\n    },\n    dashboard: {\n      title: 'New dashboard',\n      panels: [\n        {\n          type: 'add-panel',\n          gridPos: { x: 0, y: 0, w: 12, h: 9 },\n          title: 'Panel Title',\n        },\n      ],\n    },\n  };\n\n  if (urlFolderId) {\n    data.meta.folderId = parseInt(urlFolderId, 10);\n  }\n\n  return data;\n}\n\nfunction updateQueriesWhenComingFromExplore(\n  dispatch: ThunkDispatch,\n  dashboard: DashboardModel,\n  originPanelId: number,\n  queries: DataQuery[]\n) {\n  const panelArrId = dashboard.panels.findIndex(panel => panel.id === originPanelId);\n\n  if (panelArrId > -1) {\n    dashboard.panels[panelArrId].targets = queries;\n  }\n\n  // Clear update state now that we're done\n  dispatch(clearDashboardQueriesToUpdateOnLoad());\n}\n","export enum InspectTab {\n  Data = 'data',\n  Meta = 'meta', // When result metadata exists\n  Error = 'error',\n  Stats = 'stats',\n  JSON = 'json',\n  Query = 'query',\n}\n","import React, { Component } from 'react';\n\nimport { renderMarkdown, LinkModelSupplier, ScopedVars } from '@grafana/data';\nimport { Tooltip, PopoverContent } from '@grafana/ui';\nimport { getLocationSrv } from '@grafana/runtime';\n\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport templateSrv from 'app/features/templating/template_srv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { InspectTab } from '../../components/Inspector/types';\n\nenum InfoMode {\n  Error = 'Error',\n  Info = 'Info',\n  Links = 'Links',\n}\n\ninterface Props {\n  panel: PanelModel;\n  title?: string;\n  description?: string;\n  scopedVars?: ScopedVars;\n  links?: LinkModelSupplier<PanelModel>;\n  error?: string;\n}\n\nexport class PanelHeaderCorner extends Component<Props> {\n  timeSrv: TimeSrv = getTimeSrv();\n\n  getInfoMode = () => {\n    const { panel, error } = this.props;\n    if (error) {\n      return InfoMode.Error;\n    }\n    if (!!panel.description) {\n      return InfoMode.Info;\n    }\n    if (panel.links && panel.links.length) {\n      return InfoMode.Links;\n    }\n\n    return undefined;\n  };\n\n  getInfoContent = (): JSX.Element => {\n    const { panel } = this.props;\n    const markdown = panel.description || '';\n    const interpolatedMarkdown = templateSrv.replace(markdown, panel.scopedVars);\n    const markedInterpolatedMarkdown = renderMarkdown(interpolatedMarkdown);\n    const links = this.props.links && this.props.links.getLinks(panel);\n\n    return (\n      <div className=\"panel-info-content markdown-html\">\n        <div dangerouslySetInnerHTML={{ __html: markedInterpolatedMarkdown }} />\n\n        {links && links.length > 0 && (\n          <ul className=\"panel-info-corner-links\">\n            {links.map((link, idx) => {\n              return (\n                <li key={idx}>\n                  <a className=\"panel-info-corner-links__item\" href={link.href} target={link.target}>\n                    {link.title}\n                  </a>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </div>\n    );\n  };\n\n  /**\n   * Open the Panel Inspector when we click on an error\n   */\n  onClickError = () => {\n    getLocationSrv().update({ partial: true, query: { inspect: this.props.panel.id, inspectTab: InspectTab.Error } });\n  };\n\n  renderCornerType(infoMode: InfoMode, content: PopoverContent, onClick?: () => void) {\n    const theme = infoMode === InfoMode.Error ? 'error' : 'info';\n    return (\n      <Tooltip content={content} placement=\"top-start\" theme={theme}>\n        <div className={`panel-info-corner panel-info-corner--${infoMode.toLowerCase()}`} onClick={onClick}>\n          <i className=\"fa\" />\n          <span className=\"panel-info-corner-inner\" />\n        </div>\n      </Tooltip>\n    );\n  }\n\n  render() {\n    const { error } = this.props;\n    const infoMode: InfoMode | undefined = this.getInfoMode();\n\n    if (!infoMode) {\n      return null;\n    }\n\n    if (infoMode === InfoMode.Error && error) {\n      return this.renderCornerType(infoMode, error, this.onClickError);\n    }\n\n    if (infoMode === InfoMode.Info || infoMode === InfoMode.Links) {\n      return this.renderCornerType(infoMode, this.getInfoContent);\n    }\n\n    return null;\n  }\n}\n\nexport default PanelHeaderCorner;\n","import React, { FC } from 'react';\nimport { css } from 'emotion';\nimport { PanelMenuItem } from '@grafana/data';\nimport { Icon, IconName, useTheme } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\ninterface Props {\n  children: any;\n}\n\nexport const PanelHeaderMenuItem: FC<Props & PanelMenuItem> = props => {\n  const isSubMenu = props.type === 'submenu';\n  const isDivider = props.type === 'divider';\n  const theme = useTheme();\n  const menuIconClassName = css`\n    margin-right: ${theme.spacing.sm};\n    a::after {\n      display: none;\n    }\n  `;\n  const shortcutIconClassName = css`\n    position: absolute;\n    top: 7px;\n    right: ${theme.spacing.xs};\n    color: ${theme.colors.textWeak};\n  `;\n  return isDivider ? (\n    <li className=\"divider\" />\n  ) : (\n    <li className={isSubMenu ? 'dropdown-submenu' : undefined}>\n      <a onClick={props.onClick} href={props.href}>\n        {props.iconClassName && <Icon name={props.iconClassName as IconName} className={menuIconClassName} />}\n        <span className=\"dropdown-item-text\" aria-label={selectors.components.Panels.Panel.headerItems(props.text)}>\n          {props.text}\n          {isSubMenu && <Icon name=\"angle-right\" className={shortcutIconClassName} />}\n        </span>\n        {props.shortcut && (\n          <span className=\"dropdown-menu-item-shortcut\">\n            <Icon name=\"keyboard\" className={menuIconClassName} /> {props.shortcut}\n          </span>\n        )}\n      </a>\n      {props.children}\n    </li>\n  );\n};\n","import React, { PureComponent } from 'react';\nimport { PanelHeaderMenuItem } from './PanelHeaderMenuItem';\nimport { PanelMenuItem } from '@grafana/data';\n\nexport interface Props {\n  items: PanelMenuItem[];\n}\n\nexport class PanelHeaderMenu extends PureComponent<Props> {\n  renderItems = (menu: PanelMenuItem[], isSubMenu = false) => {\n    return (\n      <ul className=\"dropdown-menu dropdown-menu--menu panel-menu\" role={isSubMenu ? '' : 'menu'}>\n        {menu.map((menuItem, idx: number) => {\n          return (\n            <PanelHeaderMenuItem\n              key={`${menuItem.text}${idx}`}\n              type={menuItem.type}\n              text={menuItem.text}\n              iconClassName={menuItem.iconClassName}\n              onClick={menuItem.onClick}\n              shortcut={menuItem.shortcut}\n            >\n              {menuItem.subMenu && this.renderItems(menuItem.subMenu, true)}\n            </PanelHeaderMenuItem>\n          );\n        })}\n      </ul>\n    );\n  };\n\n  render() {\n    return <div className=\"panel-menu-container dropdown open\">{this.renderItems(this.props.items)}</div>;\n  }\n}\n","import { updateLocation } from 'app/core/actions';\nimport { store } from 'app/store/store';\nimport { AngularComponent, getDataSourceSrv, getLocationSrv } from '@grafana/runtime';\nimport { PanelMenuItem } from '@grafana/data';\nimport { copyPanel, duplicatePanel, removePanel, sharePanel } from 'app/features/dashboard/utils/panel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { contextSrv } from '../../../core/services/context_srv';\nimport { navigateToExplore } from '../../explore/state/actions';\nimport { getExploreUrl } from '../../../core/utils/explore';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { PanelCtrl } from '../../panel/panel_ctrl';\n\nexport function getPanelMenu(\n  dashboard: DashboardModel,\n  panel: PanelModel,\n  angularComponent?: AngularComponent | null\n): PanelMenuItem[] {\n  const onViewPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    store.dispatch(\n      updateLocation({\n        query: {\n          viewPanel: panel.id,\n        },\n        partial: true,\n      })\n    );\n  };\n\n  const onEditPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    store.dispatch(\n      updateLocation({\n        query: {\n          editPanel: panel.id,\n        },\n        partial: true,\n      })\n    );\n  };\n\n  const onSharePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    sharePanel(dashboard, panel);\n  };\n\n  const onInspectPanel = (tab?: string) => {\n    getLocationSrv().update({\n      partial: true,\n      query: {\n        inspect: panel.id,\n        inspectTab: tab,\n      },\n    });\n  };\n\n  const onMore = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n  };\n\n  const onDuplicatePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    duplicatePanel(dashboard, panel);\n  };\n\n  const onCopyPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    copyPanel(panel);\n  };\n\n  const onRemovePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    removePanel(dashboard, panel, true);\n  };\n\n  const onNavigateToExplore = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    const openInNewWindow = event.ctrlKey || event.metaKey ? (url: string) => window.open(url) : undefined;\n    store.dispatch(navigateToExplore(panel, { getDataSourceSrv, getTimeSrv, getExploreUrl, openInNewWindow }) as any);\n  };\n\n  const menu: PanelMenuItem[] = [];\n\n  if (!panel.isEditing) {\n    menu.push({\n      text: 'View',\n      iconClassName: 'eye',\n      onClick: onViewPanel,\n      shortcut: 'v',\n    });\n  }\n\n  if (dashboard.canEditPanel(panel) && !panel.isEditing) {\n    menu.push({\n      text: 'Edit',\n      iconClassName: 'edit',\n      onClick: onEditPanel,\n      shortcut: 'e',\n    });\n  }\n\n  menu.push({\n    text: 'Share',\n    iconClassName: 'share-alt',\n    onClick: onSharePanel,\n    shortcut: 'p s',\n  });\n\n  if (contextSrv.hasAccessToExplore() && !(panel.plugin && panel.plugin.meta.skipDataQuery)) {\n    menu.push({\n      text: 'Explore',\n      iconClassName: 'compass',\n      shortcut: 'x',\n      onClick: onNavigateToExplore,\n    });\n  }\n\n  const inspectMenu: PanelMenuItem[] = [];\n\n  // Only show these inspect actions for data plugins\n  if (panel.plugin && !panel.plugin.meta.skipDataQuery) {\n    inspectMenu.push({\n      text: 'Data',\n      onClick: (e: React.MouseEvent<any>) => onInspectPanel('data'),\n    });\n\n    if (dashboard.meta.canEdit) {\n      inspectMenu.push({\n        text: 'Query',\n        onClick: (e: React.MouseEvent<any>) => onInspectPanel('query'),\n      });\n    }\n  }\n\n  inspectMenu.push({\n    text: 'Panel JSON',\n    onClick: (e: React.MouseEvent<any>) => onInspectPanel('json'),\n  });\n\n  menu.push({\n    type: 'submenu',\n    text: 'Inspect',\n    iconClassName: 'info-circle',\n    onClick: (e: React.MouseEvent<any>) => onInspectPanel(),\n    shortcut: 'i',\n    subMenu: inspectMenu,\n  });\n\n  const subMenu: PanelMenuItem[] = [];\n\n  if (dashboard.canEditPanel(panel) && !(panel.isViewing || panel.isEditing)) {\n    subMenu.push({\n      text: 'Duplicate',\n      onClick: onDuplicatePanel,\n      shortcut: 'p d',\n    });\n\n    subMenu.push({\n      text: 'Copy',\n      onClick: onCopyPanel,\n    });\n  }\n\n  // add old angular panel options\n  if (angularComponent) {\n    const scope = angularComponent.getScope();\n    const panelCtrl: PanelCtrl = scope.$$childHead.ctrl;\n    const angularMenuItems = panelCtrl.getExtendedMenu();\n\n    for (const item of angularMenuItems) {\n      const reactItem: PanelMenuItem = {\n        text: item.text,\n        href: item.href,\n        shortcut: item.shortcut,\n      };\n\n      if (item.click) {\n        reactItem.onClick = () => {\n          scope.$eval(item.click, { ctrl: panelCtrl });\n        };\n      }\n\n      subMenu.push(reactItem);\n    }\n  }\n\n  if (!panel.isEditing && subMenu.length) {\n    menu.push({\n      type: 'submenu',\n      text: 'More...',\n      iconClassName: 'cube',\n      subMenu,\n      onClick: onMore,\n    });\n  }\n\n  if (dashboard.canEditPanel(panel) && !panel.isEditing) {\n    menu.push({ type: 'divider', text: '' });\n\n    menu.push({\n      text: 'Remove',\n      iconClassName: 'trash-alt',\n      onClick: onRemovePanel,\n      shortcut: 'p r',\n    });\n  }\n\n  return menu;\n}\n","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { isEqual } from 'lodash';\nimport { DataLink, LoadingState, PanelData, PanelMenuItem, QueryResultMetaNotice, ScopedVars } from '@grafana/data';\nimport { AngularComponent } from '@grafana/runtime';\nimport { ClickOutsideWrapper, Icon, Tooltip } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport PanelHeaderCorner from './PanelHeaderCorner';\nimport { PanelHeaderMenu } from './PanelHeaderMenu';\nimport templateSrv from 'app/features/templating/template_srv';\n\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { getPanelLinksSupplier } from 'app/features/panel/panellinks/linkSuppliers';\nimport { getPanelMenu } from 'app/features/dashboard/utils/getPanelMenu';\nimport { updateLocation } from 'app/core/actions';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  title?: string;\n  description?: string;\n  scopedVars?: ScopedVars;\n  angularComponent?: AngularComponent | null;\n  links?: DataLink[];\n  error?: string;\n  alertState?: string;\n  isViewing: boolean;\n  isEditing: boolean;\n  data: PanelData;\n  updateLocation: typeof updateLocation;\n}\n\ninterface ClickCoordinates {\n  x: number;\n  y: number;\n}\n\ninterface State {\n  panelMenuOpen: boolean;\n  menuItems: PanelMenuItem[];\n}\n\nexport class PanelHeader extends Component<Props, State> {\n  clickCoordinates: ClickCoordinates = { x: 0, y: 0 };\n\n  state: State = {\n    panelMenuOpen: false,\n    menuItems: [],\n  };\n\n  eventToClickCoordinates = (event: React.MouseEvent<HTMLDivElement>) => {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n    };\n  };\n\n  onMouseDown = (event: React.MouseEvent<HTMLDivElement>) => {\n    this.clickCoordinates = this.eventToClickCoordinates(event);\n  };\n\n  isClick = (clickCoordinates: ClickCoordinates) => {\n    return isEqual(clickCoordinates, this.clickCoordinates);\n  };\n\n  onMenuToggle = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (!this.isClick(this.eventToClickCoordinates(event))) {\n      return;\n    }\n\n    event.stopPropagation();\n\n    const { dashboard, panel, angularComponent } = this.props;\n    const menuItems = getPanelMenu(dashboard, panel, angularComponent);\n\n    this.setState({\n      panelMenuOpen: !this.state.panelMenuOpen,\n      menuItems,\n    });\n  };\n\n  closeMenu = () => {\n    this.setState({\n      panelMenuOpen: false,\n    });\n  };\n\n  onCancelQuery = () => {\n    this.props.panel.getQueryRunner().cancelQuery();\n  };\n\n  private renderLoadingState(): JSX.Element {\n    return (\n      <div className=\"panel-loading\" onClick={this.onCancelQuery}>\n        <Tooltip content=\"Cancel query\">\n          <Icon className=\"panel-loading__spinner spin-clockwise\" name=\"sync\" />\n        </Tooltip>\n      </div>\n    );\n  }\n\n  openInspect = (e: React.SyntheticEvent, tab: string) => {\n    const { updateLocation, panel } = this.props;\n\n    e.stopPropagation();\n\n    updateLocation({\n      query: { inspect: panel.id, inspectTab: tab },\n      partial: true,\n    });\n  };\n\n  renderNotice = (notice: QueryResultMetaNotice) => {\n    return (\n      <Tooltip content={notice.text} key={notice.severity}>\n        {notice.inspect ? (\n          <div className=\"panel-info-notice pointer\" onClick={e => this.openInspect(e, notice.inspect!)}>\n            <Icon name=\"info-circle\" style={{ marginRight: '8px' }} />\n          </div>\n        ) : (\n          <a className=\"panel-info-notice\" href={notice.link} target=\"_blank\">\n            <Icon name=\"info-circle\" style={{ marginRight: '8px' }} />\n          </a>\n        )}\n      </Tooltip>\n    );\n  };\n\n  render() {\n    const { panel, scopedVars, error, isViewing, isEditing, data, alertState } = this.props;\n    const { menuItems } = this.state;\n    const title = templateSrv.replace(panel.title, scopedVars, 'text');\n\n    const panelHeaderClass = classNames({\n      'panel-header': true,\n      'grid-drag-handle': !(isViewing || isEditing),\n    });\n\n    // dedupe on severity\n    const notices: Record<string, QueryResultMetaNotice> = {};\n\n    for (const series of data.series) {\n      if (series.meta && series.meta.notices) {\n        for (const notice of series.meta.notices) {\n          notices[notice.severity] = notice;\n        }\n      }\n    }\n\n    return (\n      <>\n        {data.state === LoadingState.Loading && this.renderLoadingState()}\n        <div className={panelHeaderClass}>\n          <PanelHeaderCorner\n            panel={panel}\n            title={panel.title}\n            description={panel.description}\n            scopedVars={panel.scopedVars}\n            links={getPanelLinksSupplier(panel)}\n            error={error}\n          />\n          <div\n            className=\"panel-title-container\"\n            onClick={this.onMenuToggle}\n            onMouseDown={this.onMouseDown}\n            aria-label={selectors.components.Panels.Panel.title(title)}\n          >\n            <div className=\"panel-title\">\n              {Object.values(notices).map(this.renderNotice)}\n              {alertState && (\n                <Icon\n                  name={alertState === 'alerting' ? 'heart-break' : 'heart'}\n                  className=\"icon-gf panel-alert-icon\"\n                  style={{ marginRight: '4px' }}\n                  size=\"sm\"\n                />\n              )}\n              <span className=\"panel-title-text\">{title}</span>\n              <Icon name=\"angle-down\" className=\"panel-menu-toggle\" />\n              {this.state.panelMenuOpen && (\n                <ClickOutsideWrapper onClick={this.closeMenu} parent={document}>\n                  <PanelHeaderMenu items={menuItems} />\n                </ClickOutsideWrapper>\n              )}\n              {data.request && data.request.timeInfo && (\n                <span className=\"panel-time-info\">\n                  <Icon name=\"clock-nine\" size=\"sm\" /> {data.request.timeInfo}\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { Unsubscribable } from 'rxjs';\n// Components\nimport { PanelHeader } from './PanelHeader/PanelHeader';\nimport { ErrorBoundary } from '@grafana/ui';\n// Utils & Services\nimport { getTimeSrv, TimeSrv } from '../services/TimeSrv';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\nimport { profiler } from 'app/core/profiler';\nimport { getProcessedDataFrames } from '../state/runRequest';\nimport config from 'app/core/config';\nimport { updateLocation } from 'app/core/actions';\n// Types\nimport { DashboardModel, PanelModel } from '../state';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport {\n  LoadingState,\n  AbsoluteTimeRange,\n  DefaultTimeRange,\n  toUtc,\n  toDataFrameDTO,\n  PanelEvents,\n  PanelData,\n  PanelPlugin,\n  FieldConfigSource,\n  PanelPluginMeta,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nconst DEFAULT_PLUGIN_ERROR = 'Error in plugin';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isViewing: boolean;\n  isEditing: boolean;\n  isInView: boolean;\n  width: number;\n  height: number;\n  updateLocation: typeof updateLocation;\n}\n\nexport interface State {\n  isFirstLoad: boolean;\n  renderCounter: number;\n  errorMessage?: string;\n  refreshWhenInView: boolean;\n  data: PanelData;\n}\n\nexport class PanelChrome extends PureComponent<Props, State> {\n  timeSrv: TimeSrv = getTimeSrv();\n  querySubscription: Unsubscribable;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isFirstLoad: true,\n      renderCounter: 0,\n      refreshWhenInView: false,\n      data: {\n        state: LoadingState.NotStarted,\n        series: [],\n        timeRange: DefaultTimeRange,\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { panel, dashboard } = this.props;\n\n    panel.events.on(PanelEvents.refresh, this.onRefresh);\n    panel.events.on(PanelEvents.render, this.onRender);\n\n    dashboard.panelInitialized(this.props.panel);\n\n    // Move snapshot data into the query response\n    if (this.hasPanelSnapshot) {\n      this.setState({\n        data: {\n          ...this.state.data,\n          state: LoadingState.Done,\n          series: getProcessedDataFrames(panel.snapshotData),\n        },\n        isFirstLoad: false,\n      });\n      return;\n    }\n\n    if (!this.wantsQueryExecution) {\n      this.setState({ isFirstLoad: false });\n    }\n\n    this.querySubscription = panel\n      .getQueryRunner()\n      .getData({ withTransforms: true, withFieldConfig: true })\n      .subscribe({\n        next: data => this.onDataUpdate(data),\n      });\n  }\n\n  componentWillUnmount() {\n    this.props.panel.events.off(PanelEvents.refresh, this.onRefresh);\n    this.props.panel.events.off(PanelEvents.render, this.onRender);\n\n    if (this.querySubscription) {\n      this.querySubscription.unsubscribe();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { isInView } = this.props;\n\n    // View state has changed\n    if (isInView !== prevProps.isInView) {\n      if (isInView) {\n        // Check if we need a delayed refresh\n        if (this.state.refreshWhenInView) {\n          this.onRefresh();\n        }\n      }\n    }\n  }\n\n  // Updates the response with information from the stream\n  // The next is outside a react synthetic event so setState is not batched\n  // So in this context we can only do a single call to setState\n  onDataUpdate(data: PanelData) {\n    if (!this.props.isInView) {\n      // Ignore events when not visible.\n      // The call will be repeated when the panel comes into view\n      return;\n    }\n\n    let { isFirstLoad } = this.state;\n    let errorMessage: string | undefined;\n\n    switch (data.state) {\n      case LoadingState.Loading:\n        // Skip updating state data if it is already in loading state\n        // This is to avoid rendering partial loading responses\n        if (this.state.data.state === LoadingState.Loading) {\n          return;\n        }\n        break;\n      case LoadingState.Error:\n        const { error } = data;\n        if (error) {\n          if (errorMessage !== error.message) {\n            errorMessage = error.message;\n          }\n        }\n        break;\n      case LoadingState.Done:\n        // If we are doing a snapshot save data in panel model\n        if (this.props.dashboard.snapshot) {\n          this.props.panel.snapshotData = data.series.map(frame => toDataFrameDTO(frame));\n        }\n        if (isFirstLoad) {\n          isFirstLoad = false;\n        }\n        break;\n    }\n\n    this.setState({ isFirstLoad, errorMessage, data });\n  }\n\n  onRefresh = () => {\n    const { panel, isInView, width } = this.props;\n    if (!isInView) {\n      this.setState({ refreshWhenInView: true });\n      return;\n    }\n\n    const timeData = applyPanelTimeOverrides(panel, this.timeSrv.timeRange());\n\n    // Issue Query\n    if (this.wantsQueryExecution) {\n      if (width < 0) {\n        return;\n      }\n\n      panel.getQueryRunner().run({\n        datasource: panel.datasource,\n        queries: panel.targets,\n        panelId: panel.id,\n        dashboardId: this.props.dashboard.id,\n        timezone: this.props.dashboard.getTimezone(),\n        timeRange: timeData.timeRange,\n        timeInfo: timeData.timeInfo,\n        maxDataPoints: panel.maxDataPoints || width,\n        minInterval: panel.interval,\n        scopedVars: panel.scopedVars,\n        cacheTimeout: panel.cacheTimeout,\n        transformations: panel.transformations,\n      });\n    } else {\n      // The panel should render on refresh as well if it doesn't have a query, like clock panel\n      this.onRender();\n    }\n  };\n\n  onRender = () => {\n    const stateUpdate = { renderCounter: this.state.renderCounter + 1 };\n    this.setState(stateUpdate);\n  };\n\n  onOptionsChange = (options: any) => {\n    this.props.panel.updateOptions(options);\n  };\n\n  onFieldConfigChange = (config: FieldConfigSource) => {\n    this.props.panel.updateFieldConfig(config);\n  };\n\n  onPanelError = (message: string) => {\n    if (this.state.errorMessage !== message) {\n      this.setState({ errorMessage: message });\n    }\n  };\n\n  get hasPanelSnapshot() {\n    const { panel } = this.props;\n    return panel.snapshotData && panel.snapshotData.length;\n  }\n\n  get wantsQueryExecution() {\n    return !(this.props.plugin.meta.skipDataQuery || this.hasPanelSnapshot);\n  }\n\n  onChangeTimeRange = (timeRange: AbsoluteTimeRange) => {\n    this.timeSrv.setTime({\n      from: toUtc(timeRange.from),\n      to: toUtc(timeRange.to),\n    });\n  };\n\n  shouldSignalRenderingCompleted(loadingState: LoadingState, pluginMeta: PanelPluginMeta) {\n    return loadingState === LoadingState.Done || pluginMeta.skipDataQuery;\n  }\n\n  renderPanel(width: number, height: number) {\n    const { panel, plugin } = this.props;\n    const { renderCounter, data, isFirstLoad } = this.state;\n    const { theme } = config;\n    const { state: loadingState } = data;\n\n    // do not render component until we have first data\n    if (isFirstLoad && (loadingState === LoadingState.Loading || loadingState === LoadingState.NotStarted)) {\n      return null;\n    }\n\n    // This is only done to increase a counter that is used by backend\n    // image rendering to know when to capture image\n    if (this.shouldSignalRenderingCompleted(loadingState, plugin.meta)) {\n      profiler.renderingCompleted();\n    }\n\n    const PanelComponent = plugin.panel!;\n    const timeRange = data.timeRange || this.timeSrv.timeRange();\n    const headerHeight = this.hasOverlayHeader() ? 0 : theme.panelHeaderHeight;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    const panelWidth = width - chromePadding * 2 - PANEL_BORDER;\n    const innerPanelHeight = height - headerHeight - chromePadding * 2 - PANEL_BORDER;\n    const panelContentClassNames = classNames({\n      'panel-content': true,\n      'panel-content--no-padding': plugin.noPadding,\n    });\n    const panelOptions = panel.getOptions();\n\n    return (\n      <>\n        <div className={panelContentClassNames}>\n          <PanelComponent\n            id={panel.id}\n            data={data}\n            title={panel.title}\n            timeRange={timeRange}\n            timeZone={this.props.dashboard.getTimezone()}\n            options={panelOptions}\n            fieldConfig={panel.fieldConfig}\n            transparent={panel.transparent}\n            width={panelWidth}\n            height={innerPanelHeight}\n            renderCounter={renderCounter}\n            replaceVariables={panel.replaceVariables}\n            onOptionsChange={this.onOptionsChange}\n            onFieldConfigChange={this.onFieldConfigChange}\n            onChangeTimeRange={this.onChangeTimeRange}\n          />\n        </div>\n      </>\n    );\n  }\n\n  hasOverlayHeader() {\n    const { panel } = this.props;\n    const { errorMessage, data } = this.state;\n\n    // always show normal header if we have an error message\n    if (errorMessage) {\n      return false;\n    }\n\n    // always show normal header if we have time override\n    if (data.request && data.request.timeInfo) {\n      return false;\n    }\n\n    return !panel.hasTitle();\n  }\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, width, height, updateLocation } = this.props;\n    const { errorMessage, data } = this.state;\n    const { transparent } = panel;\n\n    const containerClassNames = classNames({\n      'panel-container': true,\n      'panel-container--absolute': true,\n      'panel-container--transparent': transparent,\n      'panel-container--no-title': this.hasOverlayHeader(),\n    });\n\n    return (\n      <div className={containerClassNames} aria-label={selectors.components.Panels.Panel.containerByTitle(panel.title)}>\n        <PanelHeader\n          panel={panel}\n          dashboard={dashboard}\n          title={panel.title}\n          description={panel.description}\n          scopedVars={panel.scopedVars}\n          links={panel.links}\n          error={errorMessage}\n          isEditing={isEditing}\n          isViewing={isViewing}\n          data={data}\n          updateLocation={updateLocation}\n        />\n        <ErrorBoundary>\n          {({ error }) => {\n            if (error) {\n              this.onPanelError(error.message || DEFAULT_PLUGIN_ERROR);\n              return null;\n            }\n            return this.renderPanel(width, height);\n          }}\n        </ErrorBoundary>\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { Unsubscribable } from 'rxjs';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\n// Components\nimport { PanelHeader } from './PanelHeader/PanelHeader';\n// Utils & Services\nimport { getTimeSrv, TimeSrv } from '../services/TimeSrv';\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\nimport { setPanelAngularComponent } from '../state/reducers';\nimport config from 'app/core/config';\n// Types\nimport { DashboardModel, PanelModel } from '../state';\nimport { StoreState } from 'app/types';\nimport { DefaultTimeRange, LoadingState, PanelData, PanelEvents, PanelPlugin } from '@grafana/data';\nimport { updateLocation } from 'app/core/actions';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport { selectors } from '@grafana/e2e-selectors';\n\ninterface OwnProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isViewing: boolean;\n  isEditing: boolean;\n  isInView: boolean;\n  width: number;\n  height: number;\n}\n\ninterface ConnectedProps {\n  angularComponent?: AngularComponent | null;\n}\n\ninterface DispatchProps {\n  setPanelAngularComponent: typeof setPanelAngularComponent;\n  updateLocation: typeof updateLocation;\n}\n\nexport type Props = OwnProps & ConnectedProps & DispatchProps;\n\nexport interface State {\n  data: PanelData;\n  errorMessage?: string;\n  alertState?: string;\n}\n\ninterface AngularScopeProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  size: {\n    height: number;\n    width: number;\n  };\n}\n\nexport class PanelChromeAngularUnconnected extends PureComponent<Props, State> {\n  element: HTMLElement | null = null;\n  timeSrv: TimeSrv = getTimeSrv();\n  scopeProps?: AngularScopeProps;\n  querySubscription: Unsubscribable;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      data: {\n        state: LoadingState.NotStarted,\n        series: [],\n        timeRange: DefaultTimeRange,\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { panel } = this.props;\n    this.loadAngularPanel();\n\n    // subscribe to data events\n    const queryRunner = panel.getQueryRunner();\n\n    // we are not displaying any of this data so no need for transforms or field config\n    this.querySubscription = queryRunner.getData({ withTransforms: false, withFieldConfig: false }).subscribe({\n      next: (data: PanelData) => this.onPanelDataUpdate(data),\n    });\n  }\n\n  subscribeToRenderEvent() {\n    // Subscribe to render event, this is as far as I know only needed for changes to title & transparent\n    // These changes are modified in the model and only way to communicate that change is via this event\n    // Need to find another solution for this in tthe future (panel title in redux?)\n    this.props.panel.events.on(PanelEvents.render, this.onPanelRenderEvent);\n  }\n\n  onPanelRenderEvent = (payload?: any) => {\n    const { alertState } = this.state;\n\n    if (payload && payload.alertState && this.props.panel.alert) {\n      this.setState({ alertState: payload.alertState });\n    } else if (payload && payload.alertState && !this.props.panel.alert) {\n      // when user deletes alert in panel editor the source panel needs to refresh as this is in the mutable state and\n      // will not automatically re render\n      this.setState({ alertState: undefined });\n    } else if (payload && alertState) {\n      this.setState({ alertState: undefined });\n    } else {\n      // only needed for detecting title updates right now fix before 7.0\n      this.forceUpdate();\n    }\n  };\n\n  onPanelDataUpdate(data: PanelData) {\n    let errorMessage: string | undefined;\n\n    if (data.state === LoadingState.Error) {\n      const { error } = data;\n      if (error) {\n        if (errorMessage !== error.message) {\n          errorMessage = error.message;\n        }\n      }\n    }\n\n    this.setState({ data, errorMessage });\n  }\n\n  componentWillUnmount() {\n    this.cleanUpAngularPanel();\n\n    if (this.querySubscription) {\n      this.querySubscription.unsubscribe();\n    }\n\n    this.props.panel.events.off(PanelEvents.render, this.onPanelRenderEvent);\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { plugin, height, width, panel } = this.props;\n\n    if (prevProps.plugin !== plugin) {\n      this.cleanUpAngularPanel();\n      this.loadAngularPanel();\n    }\n\n    if (prevProps.width !== width || prevProps.height !== height) {\n      if (this.scopeProps) {\n        this.scopeProps.size.height = this.getInnerPanelHeight();\n        this.scopeProps.size.width = this.getInnerPanelWidth();\n        panel.events.emit(PanelEvents.panelSizeChanged);\n      }\n    }\n  }\n\n  getInnerPanelHeight() {\n    const { plugin, height } = this.props;\n    const { theme } = config;\n\n    const headerHeight = this.hasOverlayHeader() ? 0 : theme.panelHeaderHeight;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return height - headerHeight - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  getInnerPanelWidth() {\n    const { plugin, width } = this.props;\n    const { theme } = config;\n\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return width - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  loadAngularPanel() {\n    const { panel, dashboard, setPanelAngularComponent } = this.props;\n\n    // if we have no element or already have loaded the panel return\n    if (!this.element) {\n      return;\n    }\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"panel\" class=\"panel-height-helper\"></plugin-component>';\n\n    this.scopeProps = {\n      panel: panel,\n      dashboard: dashboard,\n      size: { width: this.getInnerPanelWidth(), height: this.getInnerPanelHeight() },\n    };\n\n    setPanelAngularComponent({\n      panelId: panel.id,\n      angularComponent: loader.load(this.element, this.scopeProps, template),\n    });\n\n    // need to to this every time we load an angular as all events are unsubscribed when panel is destroyed\n    this.subscribeToRenderEvent();\n  }\n\n  cleanUpAngularPanel() {\n    const { angularComponent, setPanelAngularComponent, panel } = this.props;\n\n    if (angularComponent) {\n      angularComponent.destroy();\n    }\n\n    setPanelAngularComponent({ panelId: panel.id, angularComponent: null });\n  }\n\n  hasOverlayHeader() {\n    const { panel } = this.props;\n    const { errorMessage, data } = this.state;\n\n    // always show normal header if we have an error message\n    if (errorMessage) {\n      return false;\n    }\n\n    // always show normal header if we have time override\n    if (data.request && data.request.timeInfo) {\n      return false;\n    }\n\n    return !panel.hasTitle();\n  }\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, plugin, angularComponent, updateLocation } = this.props;\n    const { errorMessage, data, alertState } = this.state;\n    const { transparent } = panel;\n\n    const containerClassNames = classNames({\n      'panel-container': true,\n      'panel-container--absolute': true,\n      'panel-container--transparent': transparent,\n      'panel-container--no-title': this.hasOverlayHeader(),\n      'panel-has-alert': panel.alert !== undefined,\n      [`panel-alert-state--${alertState}`]: alertState !== undefined,\n    });\n\n    const panelContentClassNames = classNames({\n      'panel-content': true,\n      'panel-content--no-padding': plugin.noPadding,\n    });\n\n    return (\n      <div className={containerClassNames} aria-label={selectors.components.Panels.Panel.containerByTitle(panel.title)}>\n        <PanelHeader\n          panel={panel}\n          dashboard={dashboard}\n          title={panel.title}\n          description={panel.description}\n          scopedVars={panel.scopedVars}\n          angularComponent={angularComponent}\n          links={panel.links}\n          error={errorMessage}\n          isViewing={isViewing}\n          isEditing={isEditing}\n          data={data}\n          updateLocation={updateLocation}\n          alertState={alertState}\n        />\n        <div className={panelContentClassNames}>\n          <div ref={element => (this.element = element)} className=\"panel-height-helper\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  return {\n    angularComponent: state.dashboard.panels[props.panel.id].angularComponent,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = { setPanelAngularComponent, updateLocation };\n\nexport const PanelChromeAngular = connect(mapStateToProps, mapDispatchToProps)(PanelChromeAngularUnconnected);\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { connect, MapStateToProps, MapDispatchToProps } from 'react-redux';\n\n// Components\nimport { PanelChrome } from './PanelChrome';\nimport { PanelChromeAngular } from './PanelChromeAngular';\n\n// Actions\nimport { initDashboardPanel } from '../state/actions';\nimport { updateLocation } from 'app/core/reducers/location';\n\n// Types\nimport { PanelModel, DashboardModel } from '../state';\nimport { StoreState } from 'app/types';\nimport { PanelPlugin } from '@grafana/data';\n\nexport interface OwnProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  isEditing: boolean;\n  isViewing: boolean;\n  isInView: boolean;\n}\n\nexport interface ConnectedProps {\n  plugin?: PanelPlugin | null;\n}\n\nexport interface DispatchProps {\n  initDashboardPanel: typeof initDashboardPanel;\n  updateLocation: typeof updateLocation;\n}\n\nexport type Props = OwnProps & ConnectedProps & DispatchProps;\n\nexport interface State {\n  isLazy: boolean;\n}\n\nexport class DashboardPanelUnconnected extends PureComponent<Props, State> {\n  element: HTMLElement;\n  specialPanels: { [key: string]: Function } = {};\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLazy: !props.isInView,\n    };\n  }\n\n  componentDidMount() {\n    this.props.initDashboardPanel(this.props.panel);\n  }\n\n  componentDidUpdate() {\n    if (this.state.isLazy && this.props.isInView) {\n      this.setState({ isLazy: false });\n    }\n  }\n\n  onMouseEnter = () => {\n    this.props.dashboard.setPanelFocus(this.props.panel.id);\n  };\n\n  onMouseLeave = () => {\n    this.props.dashboard.setPanelFocus(0);\n  };\n\n  renderPanel(plugin: PanelPlugin) {\n    const { dashboard, panel, isViewing, isInView, isEditing, updateLocation } = this.props;\n\n    return (\n      <AutoSizer>\n        {({ width, height }) => {\n          if (width === 0) {\n            return null;\n          }\n\n          if (plugin.angularPanelCtrl) {\n            return (\n              <PanelChromeAngular\n                plugin={plugin}\n                panel={panel}\n                dashboard={dashboard}\n                isViewing={isViewing}\n                isEditing={isEditing}\n                isInView={isInView}\n                width={width}\n                height={height}\n              />\n            );\n          }\n\n          return (\n            <PanelChrome\n              plugin={plugin}\n              panel={panel}\n              dashboard={dashboard}\n              isViewing={isViewing}\n              isEditing={isEditing}\n              isInView={isInView}\n              width={width}\n              height={height}\n              updateLocation={updateLocation}\n            />\n          );\n        }}\n      </AutoSizer>\n    );\n  }\n\n  render() {\n    const { isViewing, plugin } = this.props;\n    const { isLazy } = this.state;\n\n    // if we have not loaded plugin exports yet, wait\n    if (!plugin) {\n      return null;\n    }\n\n    // If we are lazy state don't render anything\n    if (isLazy) {\n      return null;\n    }\n\n    const panelWrapperClass = classNames({\n      'panel-wrapper': true,\n      'panel-wrapper--view': isViewing,\n    });\n\n    return (\n      <div className={panelWrapperClass} onMouseEnter={this.onMouseEnter} onMouseLeave={this.onMouseLeave}>\n        {this.renderPanel(plugin)}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  const panelState = state.dashboard.panels[props.panel.id];\n  if (!panelState) {\n    return { plugin: null };\n  }\n\n  return {\n    plugin: panelState.plugin,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = { initDashboardPanel, updateLocation };\n\nexport const DashboardPanel = connect(mapStateToProps, mapDispatchToProps)(DashboardPanelUnconnected);\n"],"sourceRoot":""}